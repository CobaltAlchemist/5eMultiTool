#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _5eMultiTool
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="5eDatabase")]
	public partial class _5eDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertTrait(Trait instance);
    partial void UpdateTrait(Trait instance);
    partial void DeleteTrait(Trait instance);
    partial void InsertMonster(Monster instance);
    partial void UpdateMonster(Monster instance);
    partial void DeleteMonster(Monster instance);
    partial void InsertMonsterAction(MonsterAction instance);
    partial void UpdateMonsterAction(MonsterAction instance);
    partial void DeleteMonsterAction(MonsterAction instance);
    partial void InsertMonsterSkill(MonsterSkill instance);
    partial void UpdateMonsterSkill(MonsterSkill instance);
    partial void DeleteMonsterSkill(MonsterSkill instance);
    partial void InsertMonsterTrait(MonsterTrait instance);
    partial void UpdateMonsterTrait(MonsterTrait instance);
    partial void DeleteMonsterTrait(MonsterTrait instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    #endregion
		
		public _5eDatabaseDataContext() : 
				base(global::_5eMultiTool.Properties.Settings.Default._5eDatabaseConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public _5eDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public _5eDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public _5eDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public _5eDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<Trait> Traits
		{
			get
			{
				return this.GetTable<Trait>();
			}
		}
		
		public System.Data.Linq.Table<Monster> Monsters
		{
			get
			{
				return this.GetTable<Monster>();
			}
		}
		
		public System.Data.Linq.Table<MonsterAction> MonsterActions
		{
			get
			{
				return this.GetTable<MonsterAction>();
			}
		}
		
		public System.Data.Linq.Table<MonsterSkill> MonsterSkills
		{
			get
			{
				return this.GetTable<MonsterSkill>();
			}
		}
		
		public System.Data.Linq.Table<MonsterTrait> MonsterTraits
		{
			get
			{
				return this.GetTable<MonsterTrait>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Action")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionId;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<MonsterAction> _MonsterActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIdChanging(int value);
    partial void OnActionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Action()
		{
			this._MonsterActions = new EntitySet<MonsterAction>(new Action<MonsterAction>(this.attach_MonsterActions), new Action<MonsterAction>(this.detach_MonsterActions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActionId
		{
			get
			{
				return this._ActionId;
			}
			set
			{
				if ((this._ActionId != value))
				{
					this.OnActionIdChanging(value);
					this.SendPropertyChanging();
					this._ActionId = value;
					this.SendPropertyChanged("ActionId");
					this.OnActionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_MonsterAction", Storage="_MonsterActions", ThisKey="ActionId", OtherKey="ActionId")]
		public EntitySet<MonsterAction> MonsterActions
		{
			get
			{
				return this._MonsterActions;
			}
			set
			{
				this._MonsterActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MonsterActions(MonsterAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_MonsterActions(MonsterAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trait")]
	public partial class Trait : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TraitId;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<MonsterTrait> _MonsterTraits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTraitIdChanging(int value);
    partial void OnTraitIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Trait()
		{
			this._MonsterTraits = new EntitySet<MonsterTrait>(new Action<MonsterTrait>(this.attach_MonsterTraits), new Action<MonsterTrait>(this.detach_MonsterTraits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TraitId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TraitId
		{
			get
			{
				return this._TraitId;
			}
			set
			{
				if ((this._TraitId != value))
				{
					this.OnTraitIdChanging(value);
					this.SendPropertyChanging();
					this._TraitId = value;
					this.SendPropertyChanged("TraitId");
					this.OnTraitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trait_MonsterTrait", Storage="_MonsterTraits", ThisKey="TraitId", OtherKey="TraitId")]
		public EntitySet<MonsterTrait> MonsterTraits
		{
			get
			{
				return this._MonsterTraits;
			}
			set
			{
				this._MonsterTraits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MonsterTraits(MonsterTrait entity)
		{
			this.SendPropertyChanging();
			entity.Trait = this;
		}
		
		private void detach_MonsterTraits(MonsterTrait entity)
		{
			this.SendPropertyChanging();
			entity.Trait = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Monster")]
	public partial class Monster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MonsterId;
		
		private string _Name;
		
		private string _Type;
		
		private string _Source;
		
		private string _Alignment;
		
		private System.Nullable<byte> _AC;
		
		private System.Nullable<short> _AvgHP;
		
		private string _HP;
		
		private string _Speed;
		
		private System.Nullable<byte> _Strength;
		
		private System.Nullable<byte> _Dexterity;
		
		private System.Nullable<byte> _Constitution;
		
		private System.Nullable<byte> _Intelligence;
		
		private System.Nullable<byte> _Wisdom;
		
		private System.Nullable<byte> _Charisma;
		
		private System.Nullable<byte> _Passive_Perception;
		
		private System.Nullable<decimal> _CR;
		
		private EntitySet<MonsterAction> _MonsterActions;
		
		private EntitySet<MonsterSkill> _MonsterSkills;
		
		private EntitySet<MonsterTrait> _MonsterTraits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMonsterIdChanging(int value);
    partial void OnMonsterIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnAlignmentChanging(string value);
    partial void OnAlignmentChanged();
    partial void OnACChanging(System.Nullable<byte> value);
    partial void OnACChanged();
    partial void OnAvgHPChanging(System.Nullable<short> value);
    partial void OnAvgHPChanged();
    partial void OnHPChanging(string value);
    partial void OnHPChanged();
    partial void OnSpeedChanging(string value);
    partial void OnSpeedChanged();
    partial void OnStrengthChanging(System.Nullable<byte> value);
    partial void OnStrengthChanged();
    partial void OnDexterityChanging(System.Nullable<byte> value);
    partial void OnDexterityChanged();
    partial void OnConstitutionChanging(System.Nullable<byte> value);
    partial void OnConstitutionChanged();
    partial void OnIntelligenceChanging(System.Nullable<byte> value);
    partial void OnIntelligenceChanged();
    partial void OnWisdomChanging(System.Nullable<byte> value);
    partial void OnWisdomChanged();
    partial void OnCharismaChanging(System.Nullable<byte> value);
    partial void OnCharismaChanged();
    partial void OnPassive_PerceptionChanging(System.Nullable<byte> value);
    partial void OnPassive_PerceptionChanged();
    partial void OnCRChanging(System.Nullable<decimal> value);
    partial void OnCRChanged();
    #endregion
		
		public Monster()
		{
			this._MonsterActions = new EntitySet<MonsterAction>(new Action<MonsterAction>(this.attach_MonsterActions), new Action<MonsterAction>(this.detach_MonsterActions));
			this._MonsterSkills = new EntitySet<MonsterSkill>(new Action<MonsterSkill>(this.attach_MonsterSkills), new Action<MonsterSkill>(this.detach_MonsterSkills));
			this._MonsterTraits = new EntitySet<MonsterTrait>(new Action<MonsterTrait>(this.attach_MonsterTraits), new Action<MonsterTrait>(this.detach_MonsterTraits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonsterId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MonsterId
		{
			get
			{
				return this._MonsterId;
			}
			set
			{
				if ((this._MonsterId != value))
				{
					this.OnMonsterIdChanging(value);
					this.SendPropertyChanging();
					this._MonsterId = value;
					this.SendPropertyChanged("MonsterId");
					this.OnMonsterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(10)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alignment", DbType="NVarChar(50)")]
		public string Alignment
		{
			get
			{
				return this._Alignment;
			}
			set
			{
				if ((this._Alignment != value))
				{
					this.OnAlignmentChanging(value);
					this.SendPropertyChanging();
					this._Alignment = value;
					this.SendPropertyChanged("Alignment");
					this.OnAlignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AC", DbType="TinyInt")]
		public System.Nullable<byte> AC
		{
			get
			{
				return this._AC;
			}
			set
			{
				if ((this._AC != value))
				{
					this.OnACChanging(value);
					this.SendPropertyChanging();
					this._AC = value;
					this.SendPropertyChanged("AC");
					this.OnACChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgHP", DbType="SmallInt")]
		public System.Nullable<short> AvgHP
		{
			get
			{
				return this._AvgHP;
			}
			set
			{
				if ((this._AvgHP != value))
				{
					this.OnAvgHPChanging(value);
					this.SendPropertyChanging();
					this._AvgHP = value;
					this.SendPropertyChanged("AvgHP");
					this.OnAvgHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HP", DbType="NVarChar(10)")]
		public string HP
		{
			get
			{
				return this._HP;
			}
			set
			{
				if ((this._HP != value))
				{
					this.OnHPChanging(value);
					this.SendPropertyChanging();
					this._HP = value;
					this.SendPropertyChanged("HP");
					this.OnHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speed", DbType="NVarChar(50)")]
		public string Speed
		{
			get
			{
				return this._Speed;
			}
			set
			{
				if ((this._Speed != value))
				{
					this.OnSpeedChanging(value);
					this.SendPropertyChanging();
					this._Speed = value;
					this.SendPropertyChanged("Speed");
					this.OnSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strength", DbType="TinyInt")]
		public System.Nullable<byte> Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dexterity", DbType="TinyInt")]
		public System.Nullable<byte> Dexterity
		{
			get
			{
				return this._Dexterity;
			}
			set
			{
				if ((this._Dexterity != value))
				{
					this.OnDexterityChanging(value);
					this.SendPropertyChanging();
					this._Dexterity = value;
					this.SendPropertyChanged("Dexterity");
					this.OnDexterityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Constitution", DbType="TinyInt")]
		public System.Nullable<byte> Constitution
		{
			get
			{
				return this._Constitution;
			}
			set
			{
				if ((this._Constitution != value))
				{
					this.OnConstitutionChanging(value);
					this.SendPropertyChanging();
					this._Constitution = value;
					this.SendPropertyChanged("Constitution");
					this.OnConstitutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intelligence", DbType="TinyInt")]
		public System.Nullable<byte> Intelligence
		{
			get
			{
				return this._Intelligence;
			}
			set
			{
				if ((this._Intelligence != value))
				{
					this.OnIntelligenceChanging(value);
					this.SendPropertyChanging();
					this._Intelligence = value;
					this.SendPropertyChanged("Intelligence");
					this.OnIntelligenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wisdom", DbType="TinyInt")]
		public System.Nullable<byte> Wisdom
		{
			get
			{
				return this._Wisdom;
			}
			set
			{
				if ((this._Wisdom != value))
				{
					this.OnWisdomChanging(value);
					this.SendPropertyChanging();
					this._Wisdom = value;
					this.SendPropertyChanged("Wisdom");
					this.OnWisdomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Charisma", DbType="TinyInt")]
		public System.Nullable<byte> Charisma
		{
			get
			{
				return this._Charisma;
			}
			set
			{
				if ((this._Charisma != value))
				{
					this.OnCharismaChanging(value);
					this.SendPropertyChanging();
					this._Charisma = value;
					this.SendPropertyChanged("Charisma");
					this.OnCharismaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Passive Perception]", Storage="_Passive_Perception", DbType="TinyInt")]
		public System.Nullable<byte> Passive_Perception
		{
			get
			{
				return this._Passive_Perception;
			}
			set
			{
				if ((this._Passive_Perception != value))
				{
					this.OnPassive_PerceptionChanging(value);
					this.SendPropertyChanging();
					this._Passive_Perception = value;
					this.SendPropertyChanged("Passive_Perception");
					this.OnPassive_PerceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CR", DbType="Decimal(9,3)")]
		public System.Nullable<decimal> CR
		{
			get
			{
				return this._CR;
			}
			set
			{
				if ((this._CR != value))
				{
					this.OnCRChanging(value);
					this.SendPropertyChanging();
					this._CR = value;
					this.SendPropertyChanged("CR");
					this.OnCRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Monster_MonsterAction", Storage="_MonsterActions", ThisKey="MonsterId", OtherKey="MonsterId")]
		public EntitySet<MonsterAction> MonsterActions
		{
			get
			{
				return this._MonsterActions;
			}
			set
			{
				this._MonsterActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Monster_MonsterSkill", Storage="_MonsterSkills", ThisKey="MonsterId", OtherKey="MonsterId")]
		public EntitySet<MonsterSkill> MonsterSkills
		{
			get
			{
				return this._MonsterSkills;
			}
			set
			{
				this._MonsterSkills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Monster_MonsterTrait", Storage="_MonsterTraits", ThisKey="MonsterId", OtherKey="MonsterId")]
		public EntitySet<MonsterTrait> MonsterTraits
		{
			get
			{
				return this._MonsterTraits;
			}
			set
			{
				this._MonsterTraits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MonsterActions(MonsterAction entity)
		{
			this.SendPropertyChanging();
			entity.Monster = this;
		}
		
		private void detach_MonsterActions(MonsterAction entity)
		{
			this.SendPropertyChanging();
			entity.Monster = null;
		}
		
		private void attach_MonsterSkills(MonsterSkill entity)
		{
			this.SendPropertyChanging();
			entity.Monster = this;
		}
		
		private void detach_MonsterSkills(MonsterSkill entity)
		{
			this.SendPropertyChanging();
			entity.Monster = null;
		}
		
		private void attach_MonsterTraits(MonsterTrait entity)
		{
			this.SendPropertyChanging();
			entity.Monster = this;
		}
		
		private void detach_MonsterTraits(MonsterTrait entity)
		{
			this.SendPropertyChanging();
			entity.Monster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonsterActions")]
	public partial class MonsterAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MonsterId;
		
		private int _ActionId;
		
		private System.Nullable<byte> _AttackBonus;
		
		private string _DamageRoll;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<Monster> _Monster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMonsterIdChanging(int value);
    partial void OnMonsterIdChanged();
    partial void OnActionIdChanging(int value);
    partial void OnActionIdChanged();
    partial void OnAttackBonusChanging(System.Nullable<byte> value);
    partial void OnAttackBonusChanged();
    partial void OnDamageRollChanging(string value);
    partial void OnDamageRollChanged();
    #endregion
		
		public MonsterAction()
		{
			this._Action = default(EntityRef<Action>);
			this._Monster = default(EntityRef<Monster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonsterId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MonsterId
		{
			get
			{
				return this._MonsterId;
			}
			set
			{
				if ((this._MonsterId != value))
				{
					if (this._Monster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMonsterIdChanging(value);
					this.SendPropertyChanging();
					this._MonsterId = value;
					this.SendPropertyChanged("MonsterId");
					this.OnMonsterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActionId
		{
			get
			{
				return this._ActionId;
			}
			set
			{
				if ((this._ActionId != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIdChanging(value);
					this.SendPropertyChanging();
					this._ActionId = value;
					this.SendPropertyChanged("ActionId");
					this.OnActionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttackBonus", DbType="TinyInt")]
		public System.Nullable<byte> AttackBonus
		{
			get
			{
				return this._AttackBonus;
			}
			set
			{
				if ((this._AttackBonus != value))
				{
					this.OnAttackBonusChanging(value);
					this.SendPropertyChanging();
					this._AttackBonus = value;
					this.SendPropertyChanged("AttackBonus");
					this.OnAttackBonusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamageRoll", DbType="NVarChar(10)")]
		public string DamageRoll
		{
			get
			{
				return this._DamageRoll;
			}
			set
			{
				if ((this._DamageRoll != value))
				{
					this.OnDamageRollChanging(value);
					this.SendPropertyChanging();
					this._DamageRoll = value;
					this.SendPropertyChanged("DamageRoll");
					this.OnDamageRollChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_MonsterAction", Storage="_Action", ThisKey="ActionId", OtherKey="ActionId", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.MonsterActions.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.MonsterActions.Add(this);
						this._ActionId = value.ActionId;
					}
					else
					{
						this._ActionId = default(int);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Monster_MonsterAction", Storage="_Monster", ThisKey="MonsterId", OtherKey="MonsterId", IsForeignKey=true)]
		public Monster Monster
		{
			get
			{
				return this._Monster.Entity;
			}
			set
			{
				Monster previousValue = this._Monster.Entity;
				if (((previousValue != value) 
							|| (this._Monster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Monster.Entity = null;
						previousValue.MonsterActions.Remove(this);
					}
					this._Monster.Entity = value;
					if ((value != null))
					{
						value.MonsterActions.Add(this);
						this._MonsterId = value.MonsterId;
					}
					else
					{
						this._MonsterId = default(int);
					}
					this.SendPropertyChanged("Monster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonsterSkills")]
	public partial class MonsterSkill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MonsterId;
		
		private int _SkillId;
		
		private System.Nullable<byte> _Bonus;
		
		private EntityRef<Monster> _Monster;
		
		private EntityRef<Skill> _Skill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMonsterIdChanging(int value);
    partial void OnMonsterIdChanged();
    partial void OnSkillIdChanging(int value);
    partial void OnSkillIdChanged();
    partial void OnBonusChanging(System.Nullable<byte> value);
    partial void OnBonusChanged();
    #endregion
		
		public MonsterSkill()
		{
			this._Monster = default(EntityRef<Monster>);
			this._Skill = default(EntityRef<Skill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonsterId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MonsterId
		{
			get
			{
				return this._MonsterId;
			}
			set
			{
				if ((this._MonsterId != value))
				{
					if (this._Monster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMonsterIdChanging(value);
					this.SendPropertyChanging();
					this._MonsterId = value;
					this.SendPropertyChanged("MonsterId");
					this.OnMonsterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SkillId
		{
			get
			{
				return this._SkillId;
			}
			set
			{
				if ((this._SkillId != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkillIdChanging(value);
					this.SendPropertyChanging();
					this._SkillId = value;
					this.SendPropertyChanged("SkillId");
					this.OnSkillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bonus", DbType="TinyInt")]
		public System.Nullable<byte> Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				if ((this._Bonus != value))
				{
					this.OnBonusChanging(value);
					this.SendPropertyChanging();
					this._Bonus = value;
					this.SendPropertyChanged("Bonus");
					this.OnBonusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Monster_MonsterSkill", Storage="_Monster", ThisKey="MonsterId", OtherKey="MonsterId", IsForeignKey=true)]
		public Monster Monster
		{
			get
			{
				return this._Monster.Entity;
			}
			set
			{
				Monster previousValue = this._Monster.Entity;
				if (((previousValue != value) 
							|| (this._Monster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Monster.Entity = null;
						previousValue.MonsterSkills.Remove(this);
					}
					this._Monster.Entity = value;
					if ((value != null))
					{
						value.MonsterSkills.Add(this);
						this._MonsterId = value.MonsterId;
					}
					else
					{
						this._MonsterId = default(int);
					}
					this.SendPropertyChanged("Monster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_MonsterSkill", Storage="_Skill", ThisKey="SkillId", OtherKey="SkillId", IsForeignKey=true)]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.MonsterSkills.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.MonsterSkills.Add(this);
						this._SkillId = value.SkillId;
					}
					else
					{
						this._SkillId = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonsterTraits")]
	public partial class MonsterTrait : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MonsterId;
		
		private int _TraitId;
		
		private string _DamageRoll;
		
		private EntityRef<Monster> _Monster;
		
		private EntityRef<Trait> _Trait;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMonsterIdChanging(int value);
    partial void OnMonsterIdChanged();
    partial void OnTraitIdChanging(int value);
    partial void OnTraitIdChanged();
    partial void OnDamageRollChanging(string value);
    partial void OnDamageRollChanged();
    #endregion
		
		public MonsterTrait()
		{
			this._Monster = default(EntityRef<Monster>);
			this._Trait = default(EntityRef<Trait>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonsterId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MonsterId
		{
			get
			{
				return this._MonsterId;
			}
			set
			{
				if ((this._MonsterId != value))
				{
					if (this._Monster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMonsterIdChanging(value);
					this.SendPropertyChanging();
					this._MonsterId = value;
					this.SendPropertyChanged("MonsterId");
					this.OnMonsterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TraitId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TraitId
		{
			get
			{
				return this._TraitId;
			}
			set
			{
				if ((this._TraitId != value))
				{
					if (this._Trait.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTraitIdChanging(value);
					this.SendPropertyChanging();
					this._TraitId = value;
					this.SendPropertyChanged("TraitId");
					this.OnTraitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamageRoll", DbType="NVarChar(50)")]
		public string DamageRoll
		{
			get
			{
				return this._DamageRoll;
			}
			set
			{
				if ((this._DamageRoll != value))
				{
					this.OnDamageRollChanging(value);
					this.SendPropertyChanging();
					this._DamageRoll = value;
					this.SendPropertyChanged("DamageRoll");
					this.OnDamageRollChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Monster_MonsterTrait", Storage="_Monster", ThisKey="MonsterId", OtherKey="MonsterId", IsForeignKey=true)]
		public Monster Monster
		{
			get
			{
				return this._Monster.Entity;
			}
			set
			{
				Monster previousValue = this._Monster.Entity;
				if (((previousValue != value) 
							|| (this._Monster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Monster.Entity = null;
						previousValue.MonsterTraits.Remove(this);
					}
					this._Monster.Entity = value;
					if ((value != null))
					{
						value.MonsterTraits.Add(this);
						this._MonsterId = value.MonsterId;
					}
					else
					{
						this._MonsterId = default(int);
					}
					this.SendPropertyChanged("Monster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trait_MonsterTrait", Storage="_Trait", ThisKey="TraitId", OtherKey="TraitId", IsForeignKey=true)]
		public Trait Trait
		{
			get
			{
				return this._Trait.Entity;
			}
			set
			{
				Trait previousValue = this._Trait.Entity;
				if (((previousValue != value) 
							|| (this._Trait.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trait.Entity = null;
						previousValue.MonsterTraits.Remove(this);
					}
					this._Trait.Entity = value;
					if ((value != null))
					{
						value.MonsterTraits.Add(this);
						this._TraitId = value.TraitId;
					}
					else
					{
						this._TraitId = default(int);
					}
					this.SendPropertyChanged("Trait");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Skill")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SkillId;
		
		private string _Name;
		
		private EntitySet<MonsterSkill> _MonsterSkills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSkillIdChanging(int value);
    partial void OnSkillIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Skill()
		{
			this._MonsterSkills = new EntitySet<MonsterSkill>(new Action<MonsterSkill>(this.attach_MonsterSkills), new Action<MonsterSkill>(this.detach_MonsterSkills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SkillId
		{
			get
			{
				return this._SkillId;
			}
			set
			{
				if ((this._SkillId != value))
				{
					this.OnSkillIdChanging(value);
					this.SendPropertyChanging();
					this._SkillId = value;
					this.SendPropertyChanged("SkillId");
					this.OnSkillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_MonsterSkill", Storage="_MonsterSkills", ThisKey="SkillId", OtherKey="SkillId")]
		public EntitySet<MonsterSkill> MonsterSkills
		{
			get
			{
				return this._MonsterSkills;
			}
			set
			{
				this._MonsterSkills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MonsterSkills(MonsterSkill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_MonsterSkills(MonsterSkill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
	}
}
#pragma warning restore 1591
